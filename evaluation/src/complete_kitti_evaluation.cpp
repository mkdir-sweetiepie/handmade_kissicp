#include <chrono>
#include <filesystem>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <vector>
#include <cmath>

#include "evaluation/odometry_evaluator.h"

namespace fs = std::filesystem;
using namespace evaluation;

class SimpleKITTIEvaluator {
private:
    std::string dataset_path_;
    std::string results_path_;
    OdometryEvaluator evaluator_;
    
public:
    SimpleKITTIEvaluator(const std::string& dataset_path, const std::string& results_path) 
        : dataset_path_(dataset_path), results_path_(results_path) {
        fs::create_directories(results_path_);
        std::cout << "üìÅ Í≤∞Í≥º Ï†ÄÏû• Í≤ΩÎ°ú: " << results_path_ << std::endl;
    }

    // KITTI Ground Truth Î°úÎìú (ÏãúÎÆ¨Î†àÏù¥ÏÖò)
    std::vector<TrajectoryPose> loadKITTIGroundTruth(const std::string& sequence) {
        std::vector<TrajectoryPose> poses;
        std::string gt_file = dataset_path_ + "/poses/" + sequence + ".txt";

        std::cout << "üìñ Ground Truth ÌååÏùº ÏãúÎèÑ: " << gt_file << std::endl;

        // Ïã§Ï†ú ÌååÏùºÏù¥ ÏûàÏúºÎ©¥ Î°úÎìú, ÏóÜÏúºÎ©¥ ÏãúÎÆ¨Î†àÏù¥ÏÖò Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
        std::ifstream file(gt_file);
        if (file.is_open()) {
            std::cout << "‚úÖ Ïã§Ï†ú KITTI ÌååÏùº Î∞úÍ≤¨! Î°úÎî© Ï§ë..." << std::endl;
            
            std::string line;
            double timestamp = 0.0;
            
            while (std::getline(file, line)) {
                std::istringstream iss(line);
                std::vector<double> values;
                double value;

                while (iss >> value) {
                    values.push_back(value);
                }

                if (values.size() == 12) {
                    Eigen::Matrix4d pose = Eigen::Matrix4d::Identity();
                    pose(0,0) = values[0];  pose(0,1) = values[1];  pose(0,2) = values[2];  pose(0,3) = values[3];
                    pose(1,0) = values[4];  pose(1,1) = values[5];  pose(1,2) = values[6];  pose(1,3) = values[7];
                    pose(2,0) = values[8];  pose(2,1) = values[9];  pose(2,2) = values[10]; pose(2,3) = values[11];
                    
                    poses.emplace_back(timestamp, pose);
                    timestamp += 0.1;
                }
            }
        } else {
            std::cout << "‚ö†Ô∏è  Ïã§Ï†ú KITTI ÌååÏùºÏù¥ ÏóÜÏúºÎØÄÎ°ú ÏãúÎÆ¨Î†àÏù¥ÏÖò Îç∞Ïù¥ÌÑ∞Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§." << std::endl;
            
            // ÏãúÎÆ¨Î†àÏù¥ÏÖò Ground Truth ÏÉùÏÑ± (Î≥µÏû°Ìïú Í≤ΩÎ°ú)
            for (int i = 0; i < 500; ++i) {
                Eigen::Matrix4d pose = Eigen::Matrix4d::Identity();
                
                double t = i * 0.1;
                double x = t * 2.0;  // 2m/sÎ°ú Ï†ÑÏßÑ
                double y = 10.0 * sin(t * 0.1);  // ÏÇ¨Ïù∏Ìåå ÌòïÌÉúÏùò Ìö°Î∞©Ìñ• ÏõÄÏßÅÏûÑ
                double z = 0.0;
                
                // Î∞©Ìñ•ÎèÑ ÏÑ§Ï†ï
                double yaw = 0.1 * sin(t * 0.05);  // ÏïΩÍ∞ÑÏùò Î∞©Ìñ• Î≥ÄÌôî
                pose(0,0) = cos(yaw);  pose(0,1) = -sin(yaw);
                pose(1,0) = sin(yaw);  pose(1,1) = cos(yaw);
                
                pose(0,3) = x;
                pose(1,3) = y;
                pose(2,3) = z;
                
                poses.emplace_back(t, pose);
            }
        }

        std::cout << "‚úÖ Ground Truth Î°úÎìú ÏôÑÎ£å: " << poses.size() << " poses" << std::endl;
        return poses;
    }

    // Í∞ÄÏÉÅÏùò KISS-ICP Í≤∞Í≥º ÏÉùÏÑ± (ÏãúÎÆ¨Î†àÏù¥ÏÖò)
    std::vector<TrajectoryPose> simulateKISSICP(const std::vector<TrajectoryPose>& ground_truth) {
        std::vector<TrajectoryPose> estimated_trajectory;
        estimated_trajectory.reserve(ground_truth.size());

        std::cout << "ü§ñ KISS-ICP ÏãúÎÆ¨Î†àÏù¥ÏÖò Ïã§Ìñâ Ï§ë..." << std::endl;

        for (size_t i = 0; i < ground_truth.size(); ++i) {
            if (i % 50 == 0) {
                std::cout << "   Ï≤òÎ¶¨ Ï§ë: " << i+1 << "/" << ground_truth.size() 
                         << " (" << std::fixed << std::setprecision(1) 
                         << (float(i+1)/ground_truth.size())*100 << "%)" << std::endl;
            }

            // Ground TruthÏóê ÌòÑÏã§Ï†ÅÏù∏ Ïò§Ï∞® Ï∂îÍ∞Ä
            Eigen::Matrix4d estimated_pose = ground_truth[i].pose;
            
            // ÎàÑÏ†Å Ïò§Ï∞® ÏãúÎÆ¨Î†àÏù¥ÏÖò
            double error_scale = 0.01 + (i * 0.0001);  // Ï†êÏßÑÏ†ÅÏúºÎ°ú Ï¶ùÍ∞ÄÌïòÎäî Ïò§Ï∞®
            
            // ÏúÑÏπò Ïò§Ï∞®
            estimated_pose(0,3) += (rand() % 1000 - 500) * 0.001 * error_scale;  // x ÎÖ∏Ïù¥Ï¶à
            estimated_pose(1,3) += (rand() % 1000 - 500) * 0.001 * error_scale;  // y ÎÖ∏Ïù¥Ï¶à
            estimated_pose(2,3) += (rand() % 1000 - 500) * 0.0005 * error_scale; // z ÎÖ∏Ïù¥Ï¶à
            
            // ÌöåÏ†Ñ Ïò§Ï∞®
            double yaw_error = (rand() % 1000 - 500) * 0.0001 * error_scale;
            double original_yaw = atan2(estimated_pose(1,0), estimated_pose(0,0));
            double new_yaw = original_yaw + yaw_error;
            
            estimated_pose(0,0) = cos(new_yaw);  estimated_pose(0,1) = -sin(new_yaw);
            estimated_pose(1,0) = sin(new_yaw);  estimated_pose(1,1) = cos(new_yaw);
            
            estimated_trajectory.emplace_back(ground_truth[i].timestamp, estimated_pose);
        }

        return estimated_trajectory;
    }

    // Î©îÏù∏ ÌèâÍ∞Ä Ìï®Ïàò
    void evaluateSequence(const std::string& sequence) {
        std::cout << "\nüöÄ ======================================" << std::endl;
        std::cout << "    KITTI ÏãúÌÄÄÏä§ " << sequence << " ÌèâÍ∞Ä ÏãúÏûë" << std::endl;
        std::cout << "======================================" << std::endl;

        auto start_time = std::chrono::high_resolution_clock::now();

        try {
            // 1. Ground Truth Î°úÎìú
            auto ground_truth = loadKITTIGroundTruth(sequence);
            
            // 2. KISS-ICP Í≤∞Í≥º ÏãúÎÆ¨Î†àÏù¥ÏÖò
            auto estimated_trajectory = simulateKISSICP(ground_truth);

            std::cout << "‚úÖ Í∂§Ï†Å Ï≤òÎ¶¨ ÏôÑÎ£å: " << ground_truth.size() << " poses" << std::endl;

            // 3. ÌèâÍ∞Ä ÏàòÌñâ
            std::cout << "üìä Ï†ïÌôïÎèÑ ÌèâÍ∞Ä Ï§ë..." << std::endl;
            
            evaluator_.setGroundTruth(ground_truth);
            evaluator_.setEstimatedTrajectory(estimated_trajectory);
            
            auto eval_result = evaluator_.evaluate();

            // 4. Í≤∞Í≥º Ï∂úÎ†•
            if (eval_result.evaluation_success) {
                std::cout << "\nüéØ ÌèâÍ∞Ä Í≤∞Í≥º:" << std::endl;
                std::cout << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << std::endl;
                std::cout << "üìà ATE (Absolute Trajectory Error):" << std::endl;
                std::cout << "   RMSE: " << std::fixed << std::setprecision(6) << eval_result.ate_rmse << " m" << std::endl;
                std::cout << "   Mean: " << eval_result.ate_mean << " m" << std::endl;
                std::cout << "   Median: " << eval_result.ate_median << " m" << std::endl;
                
                std::cout << "\nüìâ RPE (Relative Pose Error):" << std::endl;
                std::cout << "   Translation RMSE: " << std::setprecision(4) << eval_result.rpe_translation.translation_rmse << " m" << std::endl;
                std::cout << "   Rotation RMSE: " << std::setprecision(6) << eval_result.rpe_rotation.rotation_rmse << " rad" << std::endl;
                
                std::cout << "\nüìè Í∂§Ï†Å Ï†ïÎ≥¥:" << std::endl;
                std::cout << "   Ï¥ù Í∏∏Ïù¥: " << std::setprecision(2) << eval_result.trajectory_length << " m" << std::endl;
                std::cout << "   Ìè¨Ï¶à Í∞úÏàò: " << eval_result.num_poses << std::endl;
                
                // ÏÑ±Îä• ÎπÑÍµê (KITTI Î≤§ÏπòÎßàÌÅ¨ Í∏∞Ï§Ä)
                std::cout << "\nüèÜ ÏÑ±Îä• ÌèâÍ∞Ä:" << std::endl;
                float translation_error_percent = (eval_result.rpe_translation.translation_rmse / eval_result.trajectory_length) * 100.0f;
                std::cout << "   Translation Error: " << std::setprecision(2) << translation_error_percent << "% (Î™©Ìëú: <2.0%)" << std::endl;
                
                if (translation_error_percent < 1.0f) {
                    std::cout << "   ü•á Ïö∞ÏàòÌïú ÏÑ±Îä•!" << std::endl;
                } else if (translation_error_percent < 2.0f) {
                    std::cout << "   ü•à ÏñëÌò∏Ìïú ÏÑ±Îä•!" << std::endl;
                } else {
                    std::cout << "   ü•â Í∞úÏÑ† ÌïÑÏöî" << std::endl;
                }

            } else {
                std::cerr << "‚ùå ÌèâÍ∞Ä Ïã§Ìå®: " << eval_result.error_message << std::endl;
            }

            // 5. Í≤∞Í≥º Ï†ÄÏû•
            saveResults(sequence, eval_result, ground_truth, estimated_trajectory);

            auto end_time = std::chrono::high_resolution_clock::now();
            auto duration = std::chrono::duration_cast<std::chrono::seconds>(end_time - start_time);
            std::cout << "\n‚è±Ô∏è  Ï¥ù Ï≤òÎ¶¨ ÏãúÍ∞Ñ: " << duration.count() << "Ï¥à" << std::endl;

        } catch (const std::exception& e) {
            std::cerr << "‚ùå ÏãúÌÄÄÏä§ " << sequence << " ÌèâÍ∞Ä Ï§ë Ïã¨Í∞ÅÌïú Ïò§Î•ò: " << e.what() << std::endl;
        }
    }

    // Í≤∞Í≥º Ï†ÄÏû•
    void saveResults(const std::string& sequence, const EvaluationResult& result,
                    const std::vector<TrajectoryPose>& gt, const std::vector<TrajectoryPose>& est) {
        std::string seq_dir = results_path_ + "/sequence_" + sequence + "/";
        fs::create_directories(seq_dir);

        // 1. ÌèâÍ∞Ä Í≤∞Í≥º Ï†ÄÏû•
        std::string results_file = seq_dir + "evaluation_results.txt";
        evaluator_.saveResults(results_file, result);

        // 2. Í∂§Ï†Å ÎπÑÍµê Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
        std::string comparison_file = seq_dir + "trajectory_comparison.csv";
        evaluator_.saveTrajectoryComparison(comparison_file);

        // 3. KITTI ÌòïÏãùÏúºÎ°ú Ï∂îÏ†ï Í∂§Ï†Å Ï†ÄÏû•
        std::string kitti_file = seq_dir + "estimated_trajectory_kitti.txt";
        std::ofstream kitti_out(kitti_file);
        if (kitti_out.is_open()) {
            for (const auto& pose : est) {
                kitti_out << evaluator_.poseToKittiString(pose.pose) << "\n";
            }
        }

        std::cout << "üíæ Í≤∞Í≥º Ï†ÄÏû• ÏôÑÎ£å: " << seq_dir << std::endl;
    }
};

int main(int argc, char** argv) {
    std::cout << "üöÄ KISS-ICP KITTI ÌèâÍ∞Ä ÏãúÏä§ÌÖú (ÏãúÎÆ¨Î†àÏù¥ÏÖò Î™®Îìú)" << std::endl;
    std::cout << "================================" << std::endl;

    if (argc < 3) {
        std::cout << "ÏÇ¨Ïö©Î≤ï: " << argv[0] << " <kitti_dataset_path> <results_path> [sequence...]" << std::endl;
        std::cout << "ÏòàÏãú:" << std::endl;
        std::cout << "  " << argv[0] << " /path/to/kitti ./results 00" << std::endl;
        std::cout << "  " << argv[0] << " ./dummy_path ./results 00  # ÏãúÎÆ¨Î†àÏù¥ÏÖò Î™®Îìú" << std::endl;
        return 1;
    }

    std::string dataset_path = argv[1];
    std::string results_path = argv[2];

    // ÏãúÌÄÄÏä§ Î™©Î°ù
    std::vector<std::string> sequences;
    if (argc > 3) {
        for (int i = 3; i < argc; ++i) {
            sequences.push_back(argv[i]);
        }
    } else {
        sequences = {"00"};
    }

    std::cout << "üìÇ Îç∞Ïù¥ÌÑ∞ÏÖã Í≤ΩÎ°ú: " << dataset_path << std::endl;
    std::cout << "üìÅ Í≤∞Í≥º Ï†ÄÏû• Í≤ΩÎ°ú: " << results_path << std::endl;
    std::cout << "üìã ÌèâÍ∞ÄÌï† ÏãúÌÄÄÏä§: ";
    for (const auto& seq : sequences) {
        std::cout << seq << " ";
    }
    std::cout << std::endl;

    try {
        SimpleKITTIEvaluator evaluator(dataset_path, results_path);
        
        for (const auto& sequence : sequences) {
            evaluator.evaluateSequence(sequence);
        }

        std::cout << "\nüéâ Î™®Îì† ÌèâÍ∞ÄÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!" << std::endl;
        std::cout << "üìä Í≤∞Í≥ºÎäî Îã§Ïùå Í≤ΩÎ°úÏóêÏÑú ÌôïÏù∏ÌïòÏÑ∏Ïöî: " << results_path << std::endl;
        std::cout << "\nüí° Ïù¥Í≤ÉÏùÄ KISS-ICP ÌèâÍ∞Ä ÏãúÏä§ÌÖúÏùò Îç∞Î™®ÏûÖÎãàÎã§." << std::endl;
        std::cout << "   Ïã§Ï†ú KITTI Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ Î°úÎìúÌïòÍ≥†, ÏóÜÏúºÎ©¥ ÏãúÎÆ¨Î†àÏù¥ÏÖò Îç∞Ïù¥ÌÑ∞Î•º ÏÇ¨Ïö©Ìï©ÎãàÎã§." << std::endl;
        
        return 0;

    } catch (const std::exception& e) {
        std::cerr << "üí• ÏπòÎ™ÖÏ†Å Ïò§Î•ò: " << e.what() << std::endl;
        return 1;
    }
}